name: Deploy on EC2

on: push

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install awscli -y
          aws --version

      - name: Create Security Group
        id: aws_resources
        run: |
          SG_ID=$(aws ec2 describe-security-groups \
            --filters "Name=group-name,Values=calculatorapp-sg" "Name=vpc-id,Values=vpc-04e0171d20dfee44f" \
            --query 'SecurityGroups[0].GroupId' --output text)
          
          if [ "$SG_ID" == "None" ]; then
            SG_ID=$(aws ec2 create-security-group --group-name calculatorapp-sg \
              --description "Security group for CalculatorApp" --vpc-id vpc-04e0171d20dfee44f --query 'GroupId' --output text)
            
            aws ec2 authorize-security-group-ingress --group-id $SG_ID --protocol tcp --port 22 --cidr 0.0.0.0/0
            aws ec2 authorize-security-group-ingress --group-id $SG_ID --protocol tcp --port 80 --cidr 0.0.0.0/0
            aws ec2 authorize-security-group-ingress --group-id $SG_ID --protocol tcp --port 3000 --cidr 0.0.0.0/0
          fi
          
          echo "::set-output name=SG_ID::$SG_ID"

      - name: Launch EC2 instance via AWS CLI
        id: launch_ec2
        run: |
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ami-08ec94f928cf25a9d \
            --instance-type t2.micro \
            --key-name ELB-Key \
            --security-group-ids ${{ steps.aws_resources.outputs.SG_ID }} \
            --subnet-id subnet-07a7aa6916f788b41 \
            --associate-public-ip-address \
            --query 'Instances[0].InstanceId' \
            --output text)
          aws ec2 wait instance-running --instance-ids $INSTANCE_ID
          
          PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids $INSTANCE_ID \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)
          
          echo "::set-output name=EC2_IP::$PUBLIC_IP"

      - name: Store EC2 IP Address
        run: |
          echo "EC2 IP Address: ${{ steps.launch_ec2.outputs.EC2_IP }}"

      - name: Build Docker Image
        run: |
          docker build -t "${{ secrets.DOCKERHUB_USERNAME }}"/calculatorapp:latest .

      - name: Docker Login
        run: |
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Docker Push
        run: |
          docker push "${{ secrets.DOCKERHUB_USERNAME }}"/calculatorapp:latest

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY}}" > ~/.ssh/meinPrivateKey
          chmod 600 ~/.ssh/meinPrivateKey
          ssh-keyscan -H ${{ steps.launch_ec2.outputs.EC2_IP }} >> ~/.ssh/known_hosts

      - name: SSH Connection to EC2
        run: |
          ssh -i ~/.ssh/meinPrivateKey ec2-user@${{ steps.launch_ec2.outputs.EC2_IP }} << 'ENDSSH'
              sudo yum update -y
              sudo yum install docker -y
              sudo systemctl enable docker.service
              sudo systemctl start docker
              sudo usermod -aG docker ec2-user
              if [ $(docker ps -q --filter "name=calculatorapp") ]; then
                  sudo docker stop calculatorapp
                  sudo docker rm calculatorapp
              fi
              sudo docker pull "${{ secrets.DOCKERHUB_USERNAME }}"/calculatorapp:latest
          ENDSSH

      - name: Start Docker Container on EC2
        run: |
          ssh -i ~/.ssh/meinPrivateKey ec2-user@${{ steps.launch_ec2.outputs.EC2_IP }} << 'ENDSSH'
              sudo docker run -d -p 80:3000 --name calculatorapp "${{ secrets.DOCKERHUB_USERNAME }}"/calculatorapp:latest
          ENDSSH

      - name: Clean Up SSH Key File (optional)
        run: |
          rm ~/.ssh/meinPrivateKey
